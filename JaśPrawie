#include <iostream>
#include <string.h>
#include <cstring>

using namespace std;

char * sum = new char [200];
char * a = new char[200];

char* longg(char a[], char b[])//SPRAWDZA DLUZSZY
{
    if(strlen(a) < strlen(b))
        return b;
    return a;
}
char* shortt(char a[], char b[])//SPRAWDZA KROTSZU
{
    if(strlen(a) < strlen(b))
        return a;
    return b;
}
char* add(char a[], char b[])//DODAJE I ZWRACA WYNIK || A JEST WIEKSZE
{
    char *c = new char [200];
    memset(c, 0, 200);

    strrev(a);
    strrev(b);

    unsigned int endd = 0;

    endd = strlen(b);

    int t = 0;
    int number = 0;
    char charr;

    for(unsigned int i = 0; i < endd; i++)
    {
        if(a[i] == ',')
        {
            c[i] = ',';
            i++;

        }
        number = a[i] - '0' + b[i] - '0' + t;
        charr = (number % 10) + '0';
        t = number / 10;
        c[i] = charr;
    }

    if(strlen(a) != strlen(b))
    {
        for(unsigned int i = endd; i < strlen(a); i++)
        {
            c[i] = a[i];
            if(i == endd)
                c[i] += t;
        }
    }
    if(strlen(a) == strlen(b) && t != 0)
    {
        c[endd] = t + '0';
    }

    strrev(c);

    return c;
}
char* sub(char a[], char b[])//ODEJMUJE || A JEST WIEKSZE
{

    char* c = new char[200];
    memset(c, 0, 200);

    strrev(a);
    strrev(b);

    int endd = 0;

    endd = strlen(b);

    int number = 0;

    for(int i = 0; i < endd; i++)
    {
        if(a[i] == ',')
        {
            c[i] = ',';
            i++;
        }

        if(a[i] - b[i] >= 0)
        {
            number = a[i] - b[i];
        }
        else
        {
            int k = 1;
            while(a[i + k] - 1 < '0')
            {
                a[i + k] = '9';
                k++;
            }
            a[i + k] -= 1;

            number = a[i] - b[i] + 10;
        }


        c[i] = number + '0';
    }



    if(strlen(a) != strlen(b))
    {
        for(unsigned int i = endd; i < strlen(a); i++)
        {
            c[i] = a[i];
        }
    }

    int j = strlen(a) -1;

    while(c[j] == '0')
    {
        j--;
    }

    if(j + 1 != 0)
    {

        c[j + 1] = '\0';
    }

    strrev(c);

    return c;
}
int find(char a[], char character)//ZNAJDUJE ZNAK
{
    for(unsigned int i = 0; i < strlen(a); i++)
    {
        if(a[i] == character)
            return i;
    }
    return -1;
}
void pushing_string_end(char a[], char b[])//PUSHUJE KONIEC
{
    if(strlen(a) < strlen(b))
    {
        int y = strlen(a);
        int x = strlen(b) - strlen(a);

        a[x + y] = '\0';

        for(int i = y; i < x + y; i++)
        {
            a[i] = '0';
        }

        a[strlen(a) + x] = '\0';

    }

    if(strlen(b) < strlen(a))
    {
        int y = strlen(b);
        int x = strlen(a) - strlen(b);

        b[x + y] = '\0';

        for(int i = y; i < x + y; i++)
        {
            b[i] = '0';
        }

        b[strlen(b) + x] = '\0';

    }
}
bool check(char a[], char b[])
{
    for(int i = 0; i < strlen(a); i++)
    {
        if(a[i] > b[i])
            return 0;
        if(b[i] > a[i])
            return 1;
    }
    return 0;
}
void pushing_string(char a[], char b[])//PRZESOWA LICZBE
{
    while(find(a, ',') < find(b, ','))
    {

        a[strlen(a) + 1] = '\0';
        for(unsigned int i = strlen(a); i > 0; i--)
        {
            a[i] = a[i - 1];
        }

        a[0] = '0';

    }
    while(find(b, ',') < find(a, ','))
    {

        b[strlen(b) + 1] = '\0';
        for(unsigned int i = strlen(b); i > 0; i--)
        {
            b[i] = b[i - 1];
        }

        b[0] = '0';

    }
}
void floating_point(char a[], char b[])
{
    if(find(a, ',') == -1)
    {
        a[strlen(a)] = ',';
        a[strlen(a)] = '0';

    }
    if(find(b, ',') == -1)
    {
        b[strlen(b)] = ',';
        b[strlen(b)] = '0';

    }
}
void chara(char a[], char b[])
{
    if(a[0] == '-')
    {
        for(int i = 0; i < strlen(a) - 1; i++)
        {
            a[i] = a[i + 1];
        }

        a[strlen(a) - 1] = '\0';

    }
    if(b[0] == '-')
    {
        for(int i = 0; i < strlen(b) - 1; i++)
        {
            b[i] = b[i + 1];
        }

        b[strlen(b) - 1] = '\0';




    }
}
void setting_numbers(char a[], char b[])
{
    chara(a, b);
    floating_point(a, b);
    pushing_string(a, b);
    pushing_string_end(a, b);
}
char * add_character(char a[])
{
    a[strlen(a) + 1] = '\0';
    for(unsigned int i = strlen(a); i > 0; i--)
    {
        a[i] = a[i - 1];
    }

    a[0] = '-';

    return a;
}

int main()
{
    memset(sum, 0, 200);
    memset(a, 0, 200);

    sum[0] = '0';

    int n;

    cin >> n;

    while(n)
    {
        cin >> a;

        if(a[0] == '+')
        {
            for(int i = 0; i < strlen(a) - 1; i++)
            {
                a[i] = a[i + 1];
            }

            a[strlen(a) - 1] = '\0';

        }

        if(sum[0] == '-' && a[0] != '-')
        {
            setting_numbers(sum, a);

            if(check(sum, a) == 0)
            {
                sum = sub(sum, a);
                sum = add_character(sum);
            }
            else
            {
                sum = sub(a, sum);
            }

        }
        else if(sum[0] != '-' && a[0] == '-')
        {
            setting_numbers(sum, a);

            if(check(a, sum) == 0)
            {
                sum = sub(a, sum);
                sum = add_character(sum);
            }
            else
            {
                sum = sub(sum, a);
            }


        }
        else if(sum[0] == '-' && a[0] == '-')
        {
            setting_numbers(sum, a);

            sum = add(sum, a);
            add_character(sum);

        }
        else
        {
            setting_numbers(sum, a);

            sum = add(sum, a);
        }

        memset(a, 0, 200);
        n--;
    }

    cout << sum;

    return 0;
}
